import cv2
import numpy as np
import torch
from torch.utils.data import DataLoader
from src.preprocessing.dataset import TeethDataset
from src.models.unet import TeethUNet
import os
import matplotlib.pyplot as plt

# Konfigürasyon
DEVICE = 'cuda' if torch.cuda.is_available() else 'cpu'
MODEL_PATH = '/media/baran/Disk1/Segmentation-of-Teeth-in-Panoramic/outputs/model_checkpoints/best_model.pth'
DATA_PATH = '/media/baran/Disk1/Segmentation-of-Teeth-in-Panoramic/dataset/DentalPanoramicXrays'
RESULTS_DIR = '/media/baran/Disk1/Segmentation-of-Teeth-in-Panoramic/outputs/results'
os.makedirs(RESULTS_DIR, exist_ok=True)

# Modeli yükle
model = TeethUNet().to(DEVICE)
model.load_state_dict(torch.load(MODEL_PATH))
model.eval()

# Diş sayma ve maske işleme fonksiyonu
def process_mask(predicted_mask, ground_truth_mask):
    # İkili maske oluştur
    binary_mask = (predicted_mask > 0.5).astype(np.uint8)

    # Morfolojik işlemler: Erozyon ve Açma
    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (5, 5))
    eroded_mask = cv2.erode(binary_mask, kernel, iterations=1)
    opened_mask = cv2.morphologyEx(eroded_mask, cv2.MORPH_OPEN, kernel, iterations=1)

    # Bağlantılı bileşen analizi
    num_labels, labels, stats, centroids = cv2.connectedComponentsWithStats(opened_mask, connectivity=8)

    # Küçük bileşenleri kaldır
    min_size = 100  # Piksel cinsinden minimum bileşen boyutu
    filtered_mask = np.zeros_like(labels, dtype=np.uint8)
    for i in range(1, num_labels):
        if stats[i, cv2.CC_STAT_AREA] >= min_size:
            filtered_mask[labels == i] = 1

    # Gerçek maske ile kesişim
    ground_truth_binary = (ground_truth_mask > 0.5).astype(np.uint8)
    final_mask = cv2.bitwise_and(filtered_mask, ground_truth_binary)

    # Diş sayısını belirle
    num_teeth, _, _, _ = cv2.connectedComponentsWithStats(final_mask, connectivity=8)

    return num_teeth - 1, final_mask  # Arka planı çıkarmak için 1 çıkarılır

# Test verisinde modeli değerlendir
def test_model():
    test_dataset = TeethDataset(DATA_PATH, mode='val')
    test_loader = DataLoader(test_dataset, batch_size=1, shuffle=False)

    for idx, (image, mask) in enumerate(test_loader):
        image, mask = image.to(DEVICE), mask.to(DEVICE)
        with torch.no_grad():
            prediction = torch.sigmoid(model(image)).cpu().numpy().squeeze()

        # Maske işleme ve diş sayma
        tooth_count, processed_mask = process_mask(prediction, mask.cpu().numpy().squeeze())

        # Görselleştirme
        fig, axes = plt.subplots(1, 4, figsize=(20, 5))
        axes[0].imshow(image.cpu().squeeze().permute(1, 2, 0))
        axes[0].set_title('Girdi Görüntüsü')
        axes[1].imshow(mask.cpu().squeeze(), cmap='gray')
        axes[1].set_title('Gerçek Maske')
        axes[2].imshow(prediction, cmap='gray')
        axes[2].set_title('Tahmin Edilen Maske')
        axes[3].imshow(processed_mask, cmap='gray')
        axes[3].set_title(f'İşlenmiş Maske\nDiş Sayısı: {tooth_count}')
        plt.tight_layout()
        plt.savefig(os.path.join(RESULTS_DIR, f'test_result_{idx}.png'))
        plt.close()

        print(f"Görüntü {idx}: Diş Sayısı = {tooth_count}")

# Ana işlem
if __name__ == "__main__":
    print("Test verisinde modeli değerlendiriyor...")
    test_model()
